#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
% 如果没有这一句命令，XeTeX会出错，原因参见
% http://bbs.ctex.org/viewthread.php?tid=60547
\DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
\date{}
\end_preamble
\options UTF8
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
FPGA-based Solution for Reverse Time Migration 中文介绍
\end_layout

\begin_layout Author
作者：何聪辉
\begin_inset Newline newline
\end_inset

指导老师：陈立文
\end_layout

\begin_layout Section
简介
\end_layout

\begin_layout Standard
地质勘探的目的是为了挖掘地球内部的矿产资源，如石油，天然气。比如，如果要勘探海底的地址结构，轮船可以通过空气炮的形式向海底发射声波，同时在多个地方收集海底不同介
质反射回来的地震波，对收集到的地震波进行处理，逆向生成海底的地质结构，从而判断是否有矿产资源的存在。过去使用的算法，比如Ray Trace, 适用于较为简单的地
质结构，如水层下面是盐层，盐层下面是岩石层，层的形状基本上为水平状，不存在大幅度的倾角；但面对较为复杂的地址结构，如盐层的倾角大于70度，层间复杂交错，传统的算
法无法准确对此结构进行成像。
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rtm.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
RTM算法与单向便宜算法的比较
\begin_inset CommandInset label
LatexCommand label
name "fig:RTM算法与单向便宜算法的比较"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
正如图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:RTM算法与单向便宜算法的比较"

\end_inset

所示，单向的声波方程在边界较为陡峭的地方无法准确成像，这很有可能忽略了存在的矿产资源。偏移（Reverse Time Migration）算法能够对复杂的地质结
构进行较为准确的成像，但是该算法的计算量非常大，CPU版本的算法复杂度约为O(n^3)，且伴随着非常大的常数，再加上需要处理的数据量非常大，通常是TB数量级，该
算法在工业界的使用尚不广泛。但目前随着计算机计算力的提升以及加速卡，如GPU，FPGA，的出现，为加速该算法提供了很大的可能性。本文利用FPGA作为加速器，在F
PGA上实现该算法，目前的版本相对8核的Intel i7的CPU而言，得到了6倍的加速效果，且具有很大的优化空间。
\end_layout

\begin_layout Standard
Field Programming Gate Array (FPGA) 是一个可编程的硬件。通过对FPGA进行算法设计，代码直接通过硬件执行，而非通过操作系统的
调度，因此具有非常高的效率。但在FPGA上设计算法是一件非常难的事情，传统的方法是通过硬件描述语言（HDL）对其进行编程，开发者需要关注每一个电路逻辑单元，这也
是为什么FPGA较CPU, GPU或其他嵌入式设备而言，并没有那么流行的原因。本文利用Xilinx公司的FPGA芯片，Maxeler公司的MaxCompiler
，在一个稍高的抽象层对FPGA进行设计，实现RTM算法。
\end_layout

\begin_layout Section
研究内容
\end_layout

\begin_layout Subsection
基于声波的正演(Forward Modeling)
\end_layout

\begin_layout Standard
Reverse Time Migration 算法的核心是正演（forward modeling)。当地震波（声波）从波源发出后，从中心（波源）想四周扩散，当遇
到边界（如盐层和岩石层之间的边界）时，同时进行反射和折射，以及部分能量被吸收。正演正是模拟这个过程。在计算机处理过程中，以一个网格划分的三维数组存储特定空间的波
场 (wave field) ，正演的操作则是根据
\begin_inset Formula $t$
\end_inset

和
\begin_inset Formula $t-1$
\end_inset

时刻的波场，得出
\begin_inset Formula $t+1$
\end_inset

时刻的波场。设
\begin_inset Formula $u$
\end_inset

 为当前时刻的波场，
\begin_inset Formula $c$
\end_inset

为当前正演的速度模型（声波在特定区域的速度）, 
\begin_inset Formula $s$
\end_inset

为当前时刻波源的能量，则正演使用的声波方程为
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
F=\frac{\partial^{2}u}{\partial t^{2}} & = & c^{2}\cdot(\bigtriangledown^{2})u+s\label{eq:1}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
其中，
\begin_inset Formula $\bigtriangledown$
\end_inset

为Laplace算子，如果用二阶偏微分方程将其近似，可以得到如下的式子
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\bigtriangleup u & = & \bigtriangledown^{2}u=\frac{\partial^{2}u}{\partial x^{2}}+\frac{\partial^{2}u}{\partial y^{2}}+\frac{\partial^{2}u}{\partial x^{2}}\label{eq:2}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
将Laplace的近似代入
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:1"

\end_inset

，同时将
\begin_inset Formula $\frac{\partial^{2}u}{\partial t^{2}}$
\end_inset

离散化，可以得到式子
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:3"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\frac{u_{t+1}-2u_{t}+u_{t-1}}{dt^{2}} & = & c_{t}^{2}\cdot(\frac{\partial^{2}u_{t}}{\partial x^{2}}+\frac{\partial^{2}u_{t}}{\partial y^{2}}+\frac{\partial^{2}u_{t}}{\partial x^{2}})+s_{t}\label{eq:3}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
在计算中，连续的偏微分方程可以通过有限差分的方法转换为差分方程，如此便可在计算网格中算出每个点的值。本文使用stencil方法对
\begin_inset Formula $\frac{\partial^{2}u_{t}}{\partial x^{2}}+\frac{\partial^{2}u_{t}}{\partial y^{2}}+\frac{\partial^{2}u_{t}}{\partial x^{2}}$
\end_inset

在
\begin_inset Formula $u(t,x,y,z)$
\end_inset

进行求值。若采用6阶的stencil，stencil在点
\begin_inset Formula $(x,y,z)$
\end_inset

的值为
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
g(x,y,z) & = & \sum_{i=-3}^{+3}w_{i}f(i,y,z)+\sum_{i=-3}^{+3}w_{i}f(x,i,z)+\sum_{i=-3}^{+3}w_{i}f(x,y,i)-2f(x,y,z)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:6阶三维stencil"

\end_inset

勾画了6阶的三维stencil操作所要用到的点。
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename stencil.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
6阶三维stencil所涉及到的点
\begin_inset CommandInset label
LatexCommand label
name "fig:6阶三维stencil"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
设研究的整个波场为
\begin_inset Formula $x\times y\times z$
\end_inset

的数组，则在每一次的迭代中，需要对
\begin_inset Formula $x\cdot y\cdot z$
\end_inset

个点进行stencil操作，在实际应用中，
\begin_inset Formula $x\approx y\approx z\approx10^{4}$
\end_inset

，迭代次数
\begin_inset Formula $t\approx10^{4}$
\end_inset

，因此对于一次的波源冲击，需要进行
\begin_inset Formula $10^{16}$
\end_inset

浮点运算，这通常在CPU上是无法忍受的。况且现实生活中，往往有多次波源冲击以获得更加准确的数据。图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:基于声波方程的正演算法的伪代码"

\end_inset

是基于声波方程的正演算法的伪代码，通过嵌套的循环数量可以推测该算法惊人的复杂度。
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename acoustic.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
基于声波方程的正演算法的伪代码
\begin_inset CommandInset label
LatexCommand label
name "fig:基于声波方程的正演算法的伪代码"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
基于声波的逆时偏移 (Revese Time Migration)
\end_layout

\begin_layout Standard
令从波源开始的正演方程为为
\begin_inset Formula $F_{t=t_{0}}^{t_{n}}$
\end_inset

，代表着从
\begin_inset Formula $t_{0}$
\end_inset

时刻开始正演，直到
\begin_inset Formula $t_{n}$
\end_inset

时刻结束。对每个接收点接收到的数据进行逆向正演
\begin_inset Formula $F_{t=t_{n}}^{t_{0}}$
\end_inset

,代表着从
\begin_inset Formula $t_{n}$
\end_inset

时刻开始正演，逐步后退，直到
\begin_inset Formula $t_{0}$
\end_inset

时刻停止。而Reverse Time Migration则取每个点的正向正演和逆向正演的乘积作为改点的成像值。图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:基于声波方程的RTM算法伪代码"

\end_inset

是基于声波方程的RTM算法的伪代码。对于网格中的每个点，需要进行两次正演，可见RTM算法的计算量约为单次正演计算量的两倍。
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rtm_code.png
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
基于声波方程的RTM算法伪代码
\begin_inset CommandInset label
LatexCommand label
name "fig:基于声波方程的RTM算法伪代码"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
本文正是完成该算法在FPGA上的实现，以求获得比当前CPU实现更高的效率。
\end_layout

\begin_layout Section
研究方法
\end_layout

\begin_layout Standard
本文的重心在于RTM算法在FPGA上的设计与实现，因此，省略了介绍如何搭建FPGA开发环境，如何调试及测试，尽管这是一个工作量大，学习曲线陡峭的过程。
\end_layout

\begin_layout Subsection
FPGA编程范式
\end_layout

\begin_layout Standard
FPGA的编程范式是高级语言（C/C++)开发者难以适应的。FPGA展现在开发者（设计者）面前的是许多资源，如加法器，选择器，计数器，锁存器等等。开发者需要根据
自己的需要，思考如何连接不通的器件，使其能够按照开发者的意图工作。这通常通过硬件描述语言（HDL）完成。个别厂商，如Maxeler，为了方便一般程序员重新学习硬
件描述语言，使用了Java语言对底层的元器件和功能进行封装并提供接口，因此，开发者可以通过购买Maxeler提供的开发工具，使用Java进行开发。但Java只是
作为一种描述的语言，整个FPGA开发的范式与思想与传统的利用操作系统调度的程序截然不同。
\end_layout

\begin_layout Standard
FPGA的设计不存在一般编程中的循环（while），分支（if/else）等控制指令，而是以流的形式完成计算的。这个因为FPGA中并不存在像CPU这样的处理器，
能够完成复杂的跳转操作，只有许多简单的元器件，元器件一旦连接完成，在每个时钟周期，每个输入既能产生对应的输出。因此，本文的难点也在于如何将图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:基于声波方程的RTM算法伪代码"

\end_inset

伪代码中复杂的循环（for）和分支（if/else）以及数组元素访问指令通过简单的FPGA元器件完成。
\end_layout

\begin_layout Subsection
数组元素访问
\end_layout

\begin_layout Standard
FPGA中有许多元器件，也包括DRAM，但是没有抽象意义上的数组，自然不存在所谓的数组元素访问。但绝大多数的问题都是需要通过数组完成的，如何在FPGA上完成数组
的访问是迫切需要解决的问题。
\end_layout

\begin_layout Standard
由于FPGA的电路设计完成后，在每个时钟周期，一个输入对应一个输出，当前时钟周期能够访问的数组元素就是当前的输入。如果没有对当前的输入进行存储，下一个时钟周期的
输入将覆盖当前的输入，因此当前的输入在以后的时钟周期中无法再次访问。针对RTM算法，如图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:基于声波方程的正演算法的伪代码"

\end_inset

所示，每个时钟周期需要访问过去的三个数组元素（u[i-3], u[i-2], u[i-1]）和未来的三个元素（u[i+1], u[i+2], u[i+3]），这
可以通过FPGA中的stream offset完成。
\end_layout

\begin_layout Standard
stream window由锁存器组成，在当前时钟周期，stream window储存着过去三个时钟周期的输入，同时取得未来三个时钟周期的输入。
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename stream_offset.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
3个时钟周期的stream offset 示例
\begin_inset CommandInset label
LatexCommand label
name "fig:3个时钟周期的stream-offset-示例"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:3个时钟周期的stream-offset-示例"

\end_inset

显示了三个时钟周期里，stream window的变化情况。图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:3个时钟周期的stream-offset-示例"

\end_inset

中，stream中的第一个元素为1，最后一个元素为37，当前元素为23，stream window中储存着过去的4个元素，则可以通过stream
 offset的形式访问数组元素u[i-4]。当进入下一个时钟周期时，stream window以循环队列的形式，将队首的元素（11），弹出队列，同时压入最新的
元素（29）。如此方式即可访问数组中的非自身元素。
\end_layout

\begin_layout Standard
该方法并不适应与所有数组元素的访问，适用于本算法是因为RTM算法的数组元素访问存在一定的规律性，该方法能够有效利用FPGA资源高效在一个时钟周期内完成元素的访问
。
\end_layout

\begin_layout Subsection
模拟循环（for）操作
\end_layout

\begin_layout Standard
如果面对的不是一维数组，而是二维或者三维数组，访问的元素就没有很强的规律性，如当前元素的前3个。RTM算法中，每次需要判断该元素是否是边界元素，因此涉及到该元素
的坐标
\begin_inset Formula $(x,y,z)$
\end_inset

。其中一种方法是将三维数组铺平，变成一维数组，但是计算点
\begin_inset Formula $(x,y,z)$
\end_inset

在一维数组中对应的坐标。显然，对于三维数组，这种计算极为复杂，例如，若
\begin_inset Formula $(3,3,3)<(x,y,z)<(nx-3,ny-3,nz-3)$
\end_inset

代表该元素为非边界元素，将其展开围一维数组，则无法利用少量的判断条件来判断改点是不是边界点。因此，思考如何利用FPGA硬件来直接模拟循环是个不错的想法。
\end_layout

\begin_layout Standard
循环是高级语言编程中常见的控制操作，绝大多数的算法都需要循环来完成迭代和控制。但是FPGA中并不存在如此复杂的控制，如何通过元器件之间的组织和衔接来灵活模拟高级
语言中的循环操作是本文实现的难点之一。
\end_layout

\begin_layout Standard
本文采用多个计数器（counter）共同协作的方式模拟循环操作。对于RTM算法的3维 stencil操作，需要控制x，y，z三个维度的变量，则需要三个计数器来完
成。例如，若需要完成如下嵌套循环操作
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout LyX-Code
for (z = 0; z < nz; z++) {
\end_layout

\begin_layout LyX-Code
  for (y = 0; y < ny; y++) {
\end_layout

\begin_layout LyX-Code
    for (x = 0; x < nx; x++) {
\end_layout

\begin_layout LyX-Code
      // operations here
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
则可以通过以下步骤完成。
\end_layout

\begin_layout Enumerate
使用第一个计数器counterX，用以模拟循环中x的行为。这个计数器的特征较为简单，计数器从0开始计数，每个时钟周期，计数器的值递增1，当到达nx-1时，计数器
重新返回0（该操作成为wrap）重新计数。该设计中，需要按照上述的特征描述计数器对应的参数。
\end_layout

\begin_layout Enumerate
使用第二个计数器counterY，该计数器具有与counterX类似的特征，唯一不同的是，counterY并不是每个时钟周期递增1，而是每经过nx个时钟周期递增
1。然而，FPGA中的计数器总是会在下一个时钟周期到来时递增。因此采用额外的方式对其进行控制。对于每一个元器件，都可以设置其是否激活（enable），enabl
e状态的元器件会正常工作，而disable状态的元器件的不工作。在设计counterY时，将counterX与counterY级联（cascade），并将cou
nterX的wrap输出脉冲连接到counterY的enable引脚。如此，则当counterX到达最大值，重新返回0（wrap）时，wrap输出的高电平电压能
够是counterY处于enable状态，counterY计数器递增1。
\end_layout

\begin_layout Enumerate
第三个计数器counterZ的设计方法与counterY的设计方式相同，将counterY与counterZ级联，并将counterY的wrap输出脉冲连接到c
ounterZ的enable引脚。
\end_layout

\begin_layout Standard
上述的利用计数器的方法可以较为灵活的模拟循环操作。
\end_layout

\begin_layout Subsection
模拟分支、逻辑与（&&）、逻辑或（||）操作
\end_layout

\begin_layout Standard
RTM算法需要判断每个点是否为边界点，这需要复杂的分支和逻辑与判断操作，但是这些在FPGA中并不存在，只有通过元器件的方式模拟该操作。
\end_layout

\begin_layout Standard
简单的两路逻辑操作可以直接通过现成的multiplexer元器件完成，但面对复杂的判断操作，如
\end_layout

\begin_layout LyX-Code
if (x >= 3 && x < nx - 3)
\end_layout

\begin_layout Standard
则无法通过一个multiplexer完成，因为每个multiplexer只有一个select input，而FPGA中并不提供逻辑与（&&）和逻辑或（||）操作
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
这两种操作在元器件的实现上必须存在短路，这在FPGA的流处理设计中是不现实的
\end_layout

\end_inset

，只有位与（&）和位或（|）。本文提出的方法是通过位与（&）和位或（|）来替代逻辑与（&&）和逻辑或（||）操作。
\end_layout

\begin_layout Standard
将x >= 3的输出与 x < nx-3的输出作为位与（&）的输入，同时将位与（&）的输出作为multiplexer的select input，则可以模拟上述的
分支操作。
\end_layout

\begin_layout Subsection
外部控制
\end_layout

\begin_layout Standard
由于并不是所有的CPU操作都能转换成FPGA操作，且根据FPGA的流处理特性，本文只将计算量最大的地方移到FPGA中进行计算。其他的控制，如控制RTM算法中的时
间步，控制冲击波的次数，等外部循环将交由CPU控制。这当然存在优化的空间，可以是算法进一步得到加速。
\end_layout

\begin_layout Section
研究结果与展望
\end_layout

\begin_layout Standard
通过将计算最密集的部分移植到Xilinx FPGA上，针对较小规模的数据进行实验验证和分析，然后运行时间与8核的Intel i7处理器相比，得到了6倍的性能提升
。表
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:FPGA与CPU的平台特征"

\end_inset

描述了两种实现的平台特性。
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename comparison.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
FPGA与CPU的平台特征
\begin_inset CommandInset label
LatexCommand label
name "fig:FPGA与CPU的平台特征"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

与CPU相比，FPGA的主频非常低，这也决定了FPGA相对CPU而言具有非常低的功耗，这对于大规模的集群而言，具有深刻的意义，因为CPU的高主频将为公司带来巨额
电费开销。
\end_layout

\begin_layout Standard
由于当前机器的局限性和为了考虑实验的效率，本文并未采用大规模的数据进行测试，当time steps （迭代次数）为10时，波场传播空间的规模从
\begin_inset Formula $16\times16\times16$
\end_inset

到
\begin_inset Formula $416\times416\times416$
\end_inset

进行测试，将所耗费的时间（秒）画成曲线，得到如图
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:比较当size变化时，CPU和FPGA所花费的时间"

\end_inset

所示的结果。
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename result.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:比较当size变化时，CPU和FPGA所花费的时间"

\end_inset

比较当size变化时，CPU和FPGA所花费的时间
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
从
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:比较当size变化时，CPU和FPGA所花费的时间"

\end_inset

可以看出，随着规模的增大，CPU所花费的时间迅速增长，实际上，stencil算法的复杂度为
\begin_inset Formula $O(n^{3})$
\end_inset

，CPU曲线也会以
\begin_inset Formula $O(n^{3})$
\end_inset

的速度增长，这在大数据量面前是难以忍受的。
\end_layout

\begin_layout Standard
相对CPU而言，FPGA的实现方案优势较为明显，曲线增长的速率较CPU而言明显降低。目前尚未能准确分析FPGA实现的复杂度。
\end_layout

\begin_layout Standard
该FPGA实现并未经过任何优化，优化FPGA的实现需要对FPGA进行更加深入的认识，包括设计的技巧，资源的选择和利用等等。因此，本文的下一步工作则是针对RTM算
法，在FPGA上逐步进行优化，已获得更高的效率。
\end_layout

\end_body
\end_document
